const e=new class{constructor(){this.isConnected=!1,this.account=null,this.chainId=null,this.plugin=null}async detectTPWallet(){try{const e=await this.callPlugin("detectWallet");return e&&e.available}catch(e){return console.error("检测TP钱包失败:",e),!1}}async connectWallet(){try{const e=await this.callPlugin("connectWallet");if(e&&e.success)return this.isConnected=!0,this.account=e.account,this.chainId=e.chainId,{success:!0,account:this.account,chainId:this.chainId};throw new Error((null==e?void 0:e.error)||"连接失败")}catch(e){return console.error("连接钱包失败:",e),{success:!1,error:e.message}}}disconnectWallet(){this.isConnected=!1,this.account=null,this.chainId=null,this.callPlugin("disconnectWallet").catch(console.error)}async getBalance(e=null){try{if(!this.isConnected)throw new Error("钱包未连接");const t=e||this.account,r=await this.callPlugin("getBalance",{address:t});if(r&&r.success)return{success:!0,balance:r.balance,address:t};throw new Error((null==r?void 0:r.error)||"获取余额失败")}catch(t){return console.error("获取余额失败:",t),{success:!1,error:t.message}}}async sendTransaction(e,t){try{if(!this.isConnected)throw new Error("钱包未连接");const r=await this.callPlugin("sendTransaction",{toAddress:e,amount:t,fromAddress:this.account});if(r&&r.success)return{success:!0,txId:r.txId,result:r};throw new Error((null==r?void 0:r.error)||"发送交易失败")}catch(r){return console.error("发送交易失败:",r),{success:!1,error:r.message}}}async getTransactionHistory(e=null,t=20){try{if(!this.isConnected)throw new Error("钱包未连接");const r=e||this.account,s=await this.callPlugin("getTransactionHistory",{address:r,limit:t});if(s&&s.success)return{success:!0,transactions:s.transactions||[]};throw new Error((null==s?void 0:s.error)||"获取交易历史失败")}catch(r){return console.error("获取交易历史失败:",r),{success:!1,error:r.message}}}async signMessage(e){try{if(!this.isConnected)throw new Error("钱包未连接");const t=await this.callPlugin("signMessage",{message:e});if(t&&t.success)return{success:!0,signature:t.signature,message:e};throw new Error((null==t?void 0:t.error)||"签名消息失败")}catch(t){return console.error("签名消息失败:",t),{success:!1,error:t.message}}}getNetworkInfo(){return{isConnected:this.isConnected,account:this.account,chainId:this.chainId}}async callPlugin(e,t={}){return new Promise(((r,s)=>{uni.requireNativePlugin("TPWallet").callMethod({method:e,params:t,success:e=>{r(e)},fail:e=>{s(new Error(e.message||"插件调用失败"))}})}))}async mockWalletConnection(){return console.warn("使用模拟钱包模式，仅用于开发测试"),this.isConnected=!0,this.account="T"+"1".repeat(33),this.chainId=1,{success:!0,account:this.account,chainId:this.chainId}}async mockOptimismConnection(){return console.warn("使用模拟Optimism网络模式，仅用于开发测试"),this.isConnected=!0,this.account="0x"+"1".repeat(40),this.chainId=10,{success:!0,account:this.account,chainId:this.chainId}}async mockGetBalance(){if(!this.isConnected)return{success:!1,error:"钱包未连接"};return{success:!0,balance:(1e3*Math.random()).toFixed(6),address:this.account}}async mockSendTransaction(e,t){if(!this.isConnected)return{success:!1,error:"钱包未连接"};const r="tx_"+Math.random().toString(36).substr(2,9);return{success:!0,txId:r,result:{txid:r}}}},t={RECHARGE:{MAINNET:{address:"0xa2e0ebd19de0919c09f24b94af567732439c0260",networkId:1,networkName:"Ethereum Mainnet",chainId:1},BSC:{address:"0x1234567890abcdef1234567890abcdef12345672",networkId:56,networkName:"BSC Mainnet",chainId:56},OPTIMISM:{address:"0x1234567890abcdef1234567890abcdef12345673",networkId:10,networkName:"Optimism",chainId:10},POLYGON:{address:"0x1234567890abcdef1234567890abcdef12345674",networkId:137,networkName:"Polygon Mainnet",chainId:137},ARBITRUM:{address:"0x1234567890abcdef1234567890abcdef12345675",networkId:42161,networkName:"Arbitrum One",chainId:42161}},USDT:{MAINNET:{address:"0xdAC17F958D2ee523a2206206994597C13D831ec7",networkId:1,networkName:"Ethereum Mainnet",chainId:1,symbol:"USDT",decimals:6},BSC:{address:"0x55d398326f99059fF775485246999027B3197955",networkId:56,networkName:"BSC Mainnet",chainId:56,symbol:"USDT",decimals:18},OPTIMISM:{address:"0x94b008aA00579c1307B0EF2c499aD98a8ce58e58",networkId:10,networkName:"Optimism",chainId:10,symbol:"USDT",decimals:6},POLYGON:{address:"0xc2132D05D31c914a87C6611C10748AEb04B58e8F",networkId:137,networkName:"Polygon Mainnet",chainId:137,symbol:"USDT",decimals:6},ARBITRUM:{address:"0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",networkId:42161,networkName:"Arbitrum One",chainId:42161,symbol:"USDT",decimals:6},GOERLI:{address:"0x509Ee0d083DdF8AC028f2a56731412edD63223B9",networkId:5,networkName:"Ethereum Goerli Testnet",chainId:5,symbol:"USDT",decimals:6}}};function r(e){return{1:"MAINNET",5:"GOERLI",10:"OPTIMISM",56:"BSC",137:"POLYGON",42161:"ARBITRUM"}[e]||"MAINNET"}function s(){return"MAINNET"}function n(e=null){const s=e?r(e):"MAINNET";return t.RECHARGE[s]}function o(e=null){const s=e?r(e):"MAINNET";return t.USDT[s]}function c(e){const s=r(e);return t.USDT[s]}const i=new class{constructor(){this.isConnected=!1,this.account=null,this.chainId=null,this.provider=null,this.isH5="undefined"!=typeof window}isValidAddress(e){if(!e||"string"!=typeof e)return console.log("地址验证失败：地址为空或不是字符串",e),!1;const t=e.trim();return console.log("验证地址:",t,"长度:",t.length),34===t.length&&t.startsWith("T")?(console.log("验证为TRON地址"),!0):42===t.length&&t.startsWith("41")?(console.log("验证为TRON hex地址"),!0):42===t.length&&t.startsWith("0x")?(console.log("验证为ETH/BSC地址"),!0):(console.log("地址验证失败：不匹配任何已知格式"),!1)}extractAddress(e){if(console.log("开始提取地址，输入:",e,"类型:",typeof e),!e)return console.log("地址输入为空"),null;if("string"==typeof e){const t=e.trim();return console.log("字符串地址，trim后:",t),this.isValidAddress(t)?(console.log("字符串地址验证通过"),t):(console.log("字符串地址验证失败"),null)}if("object"==typeof e){if(e.base58&&"string"==typeof e.base58){const t=e.base58.trim();if(this.isValidAddress(t))return t}if(e.hex&&"string"==typeof e.hex){const t=e.hex.trim();if(this.isValidAddress(t))return t}if(e.value&&"string"==typeof e.value){const t=e.value.trim();if(this.isValidAddress(t))return t}if(e.toString&&"function"==typeof e.toString)try{const t=e.toString();if(t&&"[object Object]"!==t&&t.length>10){const e=t.trim();if(this.isValidAddress(e))return e}}catch(t){console.warn("toString方法调用失败:",t)}const r=["address","addr","account","publicKey"];for(const t of r)if(e[t]&&"string"==typeof e[t]){const r=e[t].trim();if(this.isValidAddress(r))return r}}return console.warn("无法从输入中提取有效地址:",e),null}async detectTPWallet(){if(!this.isH5)return!1;try{if(window.tronWeb||window.tronLink)return!0;if(window.tronLink&&window.tronLink.ready)return!0;if(window.ethereum&&window.ethereum.isTokenPocket)return!0;if(window.TronLink&&window.TronLink.isTokenPocket)return!0;if(window.TronLink&&!0===window.TronLink.isTokenPocket)return!0;if(window.tronWeb&&!0===window.tronWeb.isTokenPocket)return!0;const e=navigator.userAgent.toLowerCase();return!(!e.includes("tokenpocket")&&!e.includes("tp"))||!!(window.location.href.includes("tokenpocket")||window.location.href.includes("tp")||document.referrer.includes("tokenpocket")||document.referrer.includes("tp"))}catch(e){return!1}}detectNetwork(e){if(e.isTokenPocket){if(console.log("检测到移动端TokenPocket，尝试获取网络信息..."),e.networkVersion){const t=e.networkVersion.toString();return"56"===t?"BSC":"10"===t?"OPTIMISM":"1"===t?"ETH":UNKNOWN_}if(e.chainId){const t=e.chainId.toString();return"56"===t||"0x38"===t?"BSC":"10"===t||"0xA"===t?"OPTIMISM":"1"===t||"0x1"===t?"ETH":UNKNOWN_}return"TOKENPOCKET_MOBILE"}if(e.networkVersion)return e.networkVersion;if(e.chainId){const t=e.chainId.toString();if("56"===t||"0x38"===t)return"BSC";if("10"===t||"0xA"===t)return"OPTIMISM";if("1"===t||"0x1"===t)return"ETH"}return e.fullNode&&e.fullNode.host&&e.fullNode.host.includes("trx")?"TRON":"UNKNOWN"}async connectWallet(){if(!this.isH5)throw new Error("当前环境不支持H5钱包连接");try{let r=null;if(window.ethereum&&window.ethereum.isTokenPocket)r=window.ethereum,console.log("检测到移动端TokenPocket (ethereum)");else if(window.TronLink&&window.TronLink.isTokenPocket)r=window.TronLink,console.log("检测到移动端TokenPocket (TronLink)");else if(window.tronLink&&window.tronLink.ready)r=window.tronLink,console.log("检测到桌面端TP钱包 (tronLink)");else{if(!window.tronWeb)throw new Error("未检测到TP钱包");r=window.tronWeb,console.log("检测到桌面端TP钱包 (tronWeb)")}console.log("开始连接钱包，provider:",r);const s=this.detectNetwork(r);if(console.log("检测到的网络类型:",s),r.enable)try{console.log("尝试调用enable方法激活钱包..."),await r.enable(),console.log("enable方法调用成功")}catch(e){console.warn("enable方法失败:",e)}await new Promise((e=>setTimeout(e,2e3)));let n=null;if(r.request)try{let e;console.log("尝试使用request方法..."),e="BSC"===s||"ETH"===s||"TOKENPOCKET_MOBILE"===s?await r.request({method:"eth_requestAccounts"}):await r.request({method:"tron_requestAccounts"}),console.log("request方法返回:",e),e&&Array.isArray(e)&&e.length>0&&(n=this.extractAddress(e[0]),n&&console.log("从request方法获取到地址:",n))}catch(e){console.warn("request方法失败:",e)}if(!n&&r.getAccounts)try{console.log("尝试使用getAccounts方法...");const e=await r.getAccounts();console.log("getAccounts方法返回:",e),e&&Array.isArray(e)&&e.length>0&&(n=this.extractAddress(e[0]),n&&console.log("从getAccounts方法获取到地址:",n))}catch(e){console.warn("getAccounts方法失败:",e)}if(!n&&r.defaultAddress){console.log("检查defaultAddress:",r.defaultAddress);const e=r.defaultAddress;if(e.base58&&!1!==e.base58&&"string"==typeof e.base58)n=e.base58,console.log("从defaultAddress.base58获取到地址:",n);else if(e.hex&&!1!==e.hex&&"string"==typeof e.hex)n=e.hex,console.log("从defaultAddress.hex获取到地址:",n);else if(e.toString&&"function"==typeof e.toString)try{const t=e.toString();t&&"string"==typeof t&&t.length>10&&"[object Object]"!==t?(n=t,console.log("从defaultAddress.toString获取到地址:",n)):console.log("defaultAddress.toString返回无效值:",t)}catch(t){console.warn("defaultAddress.toString调用失败:",t)}}if(!n&&r.address){console.log("检查address属性:",r.address);const e=r.address;if("string"==typeof e&&e.length>10)n=e,console.log("从address字符串获取到地址:",n);else if("object"==typeof e&&e)if(e.base58&&!1!==e.base58)n=e.base58,console.log("从address.base58获取到地址:",n);else if(e.hex&&!1!==e.hex)n=e.hex,console.log("从address.hex获取到地址:",n);else if(e.toString&&"function"==typeof e.toString)try{const t=e.toString();t&&"string"==typeof t&&t.length>10&&"[object Object]"!==t?(n=t,console.log("从address.toString获取到地址:",n)):console.log("address.toString返回无效值:",t)}catch(t){console.warn("address.toString调用失败:",t)}}if(console.log("最终获取到的地址:",n),n&&this.isValidAddress(n))return this.account=n,this.isConnected=!0,this.provider=r,"BSC"===s?this.chainId=56:"OPTIMISM"===s?this.chainId=10:"ETH"===s||"TRON"===s?this.chainId=1:n&&n.startsWith("0x")?(this.chainId=1,console.log("通过地址格式判断为ETH网络")):n&&n.startsWith("T")?(this.chainId=1,console.log("通过地址格式判断为TRON网络")):this.chainId=1,console.log("连接成功，最终地址:",this.account,"网络类型:",s,"chainId:",this.chainId),{success:!0,account:this.account,chainId:this.chainId};{let e="无法获取账户地址",t="";return"BSC"===s||"ETH"===s?r.defaultAddress&&"object"==typeof r.defaultAddress&&!1===r.defaultAddress.base58&&!1===r.defaultAddress.hex?(e="BSC钱包检测到但账户未激活",t='请在钱包中：\n1. 确保已创建或导入账户\n2. 确保账户已解锁\n3. 在钱包中打开"允许DApp连接"\n4. 重新刷新页面并连接\n5. 检查钱包是否已登录\n6. 确保选择了BSC网络'):n?(e="无法识别的BSC账户数据格式",t="请尝试：\n1. 更新钱包到最新版本\n2. 重启钱包应用\n3. 清除浏览器缓存后重试\n4. 检查钱包是否已登录\n5. 确保选择了BSC网络"):(e="BSC钱包连接被拒绝或超时",t='请确保：\n1. 钱包已安装并运行\n2. 在弹出的连接请求中点击"允许"\n3. 如未出现弹窗，请刷新页面重试\n4. 检查钱包是否已登录\n5. 确保选择了BSC网络'):r.defaultAddress&&"object"==typeof r.defaultAddress&&!1===r.defaultAddress.base58&&!1===r.defaultAddress.hex?(e="TP钱包检测到但账户未激活",t='请在TP钱包中：\n1. 确保已创建或导入账户\n2. 确保账户已解锁\n3. 在钱包中打开"允许DApp连接"\n4. 重新刷新页面并连接\n5. 检查TP钱包是否已登录\n6. 在TP钱包中点击"账户"或"钱包"选项\n7. 选择或创建TRON账户\n8. 确保账户已解锁（输入密码）\n9. 检查是否选择了TRON主网'):n?(e="无法识别的TP账户数据格式",t="请尝试：\n1. 更新TP钱包到最新版本\n2. 重启TP钱包应用\n3. 清除浏览器缓存后重试\n4. 检查TP钱包是否已登录\n5. 在TP钱包中重新选择TRON账户"):(e="TP钱包连接被拒绝或超时",t='请确保：\n1. TP钱包已安装并运行\n2. 在弹出的连接请求中点击"允许"\n3. 如未出现弹窗，请刷新页面重试\n4. 检查TP钱包是否已登录\n5. 在TP钱包中确保选择了TRON网络'),{success:!1,error:e,suggestions:t,code:"ADDRESS_EXTRACTION_FAILED"}}}catch(e){return{success:!1,error:e.message}}}disconnectWallet(){this.isConnected=!1,this.account=null,this.chainId=null,this.provider=null}getNetworkInfo(){const e=this.isConnected&&this.account&&this.provider;this.isConnected&&!this.provider&&(console.warn("检测到无效连接状态，重置连接状态"),this.isConnected=!1,this.account=null,this.chainId=null);const t={isConnected:this.isConnected,account:this.account,chainId:this.chainId};return console.log("H5钱包服务网络信息:",t,"有效连接:",e),t}getCurrentNetworkType(){return 10===this.chainId?"OPTIMISM":56===this.chainId?"BSC":1===this.chainId?this.account&&this.account.startsWith("0x")?"ETH":this.account&&this.account.startsWith("T")?"TRON":"ETH":"UNKNOWN"}async getBalance(e=null){try{if(!this.isConnected||!this.provider)throw new Error("钱包未连接");let c=e||this.account;if(c=this.extractAddress(c),!c||"string"!=typeof c||c.length<10)return console.warn("地址无效:",c,"原始输入:",e||this.account),{success:!1,error:"地址无效",balance:0,address:c};let i=0;try{const e=this.getCurrentNetworkType();if(console.log("当前网络类型:",e,"chainId:",this.chainId),"OPTIMISM"===e||"ETH"===e){if(this.provider.request)try{console.log("开始查询ETH余额，地址:",c);const e=await this.provider.request({method:"eth_getBalance",params:[c,"latest"]});let t;console.log("ETH余额查询原始结果:",e,"类型:",typeof e),t="string"==typeof e?e.startsWith("0x")?BigInt(e):BigInt("0x"+e):"number"==typeof e?BigInt(e):BigInt(e.toString()),i=Number(t)/Math.pow(10,18),console.log("ETH余额解析详情:",{rawResult:e,weiBalance:t.toString(),ethBalance:i,address:c})}catch(t){if(console.warn("ETH余额查询失败，尝试其他方法:",t),this.provider.eth&&this.provider.eth.getBalance)try{i=await this.provider.eth.getBalance(c),i=Number(i)/Math.pow(10,18),console.log("降级方法获取ETH余额成功:",i)}catch(r){console.warn("降级方法也失败:",r)}}}else if("BSC"===e){if(this.provider.request)try{console.log("开始查询BSC余额，地址:",c);const e=await this.provider.request({method:"eth_getBalance",params:[c,"latest"]});let t;console.log("BSC余额查询原始结果:",e,"类型:",typeof e),t="string"==typeof e?e.startsWith("0x")?BigInt(e):BigInt("0x"+e):"number"==typeof e?BigInt(e):BigInt(e.toString()),i=Number(t)/Math.pow(10,18),console.log("BSC余额解析详情:",{rawResult:e,weiBalance:t.toString(),bnbBalance:i,address:c})}catch(s){console.warn("BSC余额查询失败:",s)}}else if("TRON"===e){if(this.provider.trx&&this.provider.trx.getBalance)i=await this.provider.trx.getBalance(c),i/=1e6,console.log("TRON余额查询成功:",i);else if(this.provider.request){i=await this.provider.request({method:"tron_getBalance",params:[c]})/1e6,console.log("TRON余额查询成功:",i)}}else if(console.warn("未知网络类型，尝试通用方法"),this.provider.request)try{console.log("开始通用余额查询，地址:",c);const e=await this.provider.request({method:"eth_getBalance",params:[c,"latest"]});let t;console.log("通用余额查询原始结果:",e,"类型:",typeof e),t="string"==typeof e?e.startsWith("0x")?BigInt(e):BigInt("0x"+e):"number"==typeof e?BigInt(e):BigInt(e.toString()),i=Number(t)/Math.pow(10,18),console.log("通用余额解析详情:",{rawResult:e,weiBalance:t.toString(),balance:i,address:c})}catch(n){console.warn("通用余额查询失败:",n)}}catch(o){console.warn("获取余额失败:",o),i=0}return{success:!0,balance:i,address:c}}catch(n){return console.error("获取余额失败:",n),{success:!1,error:n.message,balance:0,address:e||this.account}}}async sendTransaction(e,t){try{if(!this.isConnected||!this.provider)throw new Error("钱包未连接");const r=this.extractAddress(e);if(!r)throw new Error("无效的目标地址");let s;return console.log("准备发送交易:",{to:r,amount:t,from:this.account,network:this.chainId}),s=56===this.chainId?await this.sendBSCTransaction(r,t):1===this.chainId||10===this.chainId?await this.sendETHTransaction(r,t):await this.sendGenericTransaction(r,t),s}catch(r){return console.error("发送交易失败:",r),{success:!1,error:r.message}}}async sendBSCTransaction(e,t){try{if(this.provider.request){return{success:!0,txHash:await this.provider.request({method:"eth_sendTransaction",params:[{to:e,value:"0x"+(t*Math.pow(10,18)).toString(16),from:this.account}]}),message:"BSC交易已提交"}}throw new Error("当前钱包不支持BSC交易")}catch(r){return console.error("BSC交易发送失败:",r),{success:!1,error:r&&r.message?r.message:"BSC交易发送失败"}}}async sendETHTransaction(e,t){try{if(this.provider.request){return{success:!0,txHash:await this.provider.request({method:"eth_sendTransaction",params:[{to:e,value:"0x"+(t*Math.pow(10,18)).toString(16),from:this.account}]}),message:"ETH交易已提交"}}throw new Error("当前钱包不支持ETH交易")}catch(r){return console.error("ETH交易发送失败:",r),{success:!1,error:r&&r.message?r.message:"ETH交易发送失败"}}}async sendGenericTransaction(e,t){try{if(this.provider.request){return{success:!0,txHash:await this.provider.request({method:"eth_sendTransaction",params:[{to:e,value:"0x"+(t*Math.pow(10,18)).toString(16),from:this.account}]}),message:"交易已提交"}}throw new Error("当前钱包不支持交易发送")}catch(r){return console.error("通用交易发送失败:",r),{success:!1,error:r&&r.message?r.message:"交易发送失败"}}}async sendUSDTTransaction(e,t){try{if(!this.isConnected||!this.provider)throw new Error("钱包未连接");console.log("开始USDT代币转账:",{to:e,amount:t,from:this.account,chainId:this.chainId});const n=this.extractAddress(e);if(!n)throw new Error("无效的目标地址: "+e);let o,i;try{const e=c(this.chainId);if(!e||!e.address)throw new Error("配置文件中未找到USDT合约配置 (chainId: "+this.chainId+")");o=e.address,i=e.decimals,console.log("从配置文件获取USDT合约 (chainId:",this.chainId,"):",e)}catch(r){if(console.warn("从配置文件获取USDT合约失败，使用硬编码配置:",r),1===this.chainId)o="0xdAC17F958D2ee523a2206206994597C13D831ec7",i=6;else if(56===this.chainId)o="0x55d398326f99059fF775485246999027B3197955",i=18;else if(5===this.chainId)o="0x509Ee0d083DdF8AC028f2a56731412edD63223B9",i=6;else if(10===this.chainId)o="0x94b008aA00579c1307B0EF2c499aD98a8ce58e58",i=6;else if(137===this.chainId)o="0xc2132D05D31c914a87C6611C10748AEb04B58e8F",i=6;else{if(42161!==this.chainId)throw new Error("当前网络 (chainId: "+this.chainId+") 不支持USDT");o="0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",i=6}}if(!t||t<=0)throw new Error("转账金额必须大于0");console.log("验证USDT合约可访问性...");const a=await this.validateUSDTContract(o);if(!a.valid)throw new Error("USDT合约不可访问: "+a.error);console.log("USDT合约验证通过");const l="0xa9059cbb",d=n.slice(2).toLowerCase().padStart(64,"0"),h=BigInt(Math.floor(t*Math.pow(10,i))),u=h.toString(16).padStart(64,"0"),g=l+d+u;if(console.log("USDT转账参数详情:",{to:o,data:g,from:this.account,amount:t,amountWei:h.toString(),decimals:i,toAddressPadded:d,amountPadded:u,methodSignature:l}),this.provider.request){let e;try{console.log("开始估算gas..."),e=await this.provider.request({method:"eth_estimateGas",params:[{to:o,data:g,from:this.account}]}),console.log("Gas估算成功:",e)}catch(s){console.warn("Gas估算失败，使用默认值:",s),e="0x"+1e5.toString(16)}const r=await this.provider.request({method:"eth_sendTransaction",params:[{to:o,data:g,from:this.account,gas:e}]});return console.log("USDT转账结果:",r),{success:!0,txHash:r,message:"USDT转账已提交",contractAddress:o,amount:t,decimals:i,gasEstimate:e}}throw new Error("当前钱包不支持代币转账")}catch(n){console.error("USDT转账失败:",n);let e="USDT转账失败";return n.message&&(e=n.message.includes("insufficient funds")?"余额不足，请检查USDT余额和ETH/BNB余额（用于支付gas费）":n.message.includes("gas")?"Gas估算失败，请检查网络连接和合约地址":n.message.includes("revert")?"交易被拒绝，可能是合约调用失败或余额不足":n.message.includes("invalid address")?"无效的合约地址或目标地址":n.message),{success:!1,error:e,originalError:n.message}}}async validateUSDTContract(e){try{if(!this.provider||!this.provider.request)return{valid:!1,error:"Provider不可用"};const t="0x06fdde03",r=await this.provider.request({method:"eth_call",params:[{to:e,data:t},"latest"]});return console.log("USDT合约验证结果:",r),{valid:!0,result:r}}catch(t){return console.warn("USDT合约验证失败:",t),{valid:!1,error:t.message}}}async getUSDTBalance(e=null){try{if(console.log("=== USDT余额查询开始 ==="),console.log("钱包连接状态:",this.isConnected),console.log("Provider状态:",!!this.provider),console.log("当前账户:",this.account),console.log("当前chainId:",this.chainId),console.log("传入地址参数:",e),!this.isConnected||!this.provider)throw console.error("钱包未连接或provider无效"),new Error("钱包未连接");let s,n,o=e||this.account;if(console.log("目标地址(提取前):",o),o=this.extractAddress(o),console.log("目标地址(提取后):",o),!o||"string"!=typeof o||o.length<10)return console.warn("地址无效:",o,"原始输入:",e||this.account),{success:!1,error:"1地址无效",balance:0,debug:{originalAddress:e||this.account,extractedAddress:o,isConnected:this.isConnected,hasProvider:!!this.provider,chainId:this.chainId}};console.log("检测网络类型，chainId:",this.chainId);try{const e=c(this.chainId);if(!e||!e.address)throw new Error("配置文件中未找到USDT合约配置 (chainId: "+this.chainId+")");s=e.address,n=e.decimals,console.log("从配置文件获取USDT合约 (chainId:",this.chainId,"):",e)}catch(t){if(console.warn("从配置文件获取USDT合约失败，使用硬编码配置:",t),1===this.chainId)s="0xdAC17F958D2ee523a2206206994597C13D831ec7",n=6,console.log("使用ETH主网USDT合约");else if(56===this.chainId)s="0x55d398326f99059fF775485246999027B3197955",n=18,console.log("使用BSC网络USDT合约");else if(5===this.chainId)s="0x509Ee0d083DdF8AC028f2a56731412edD63223B9",n=6,console.log("使用ETH Goerli测试网USDT合约");else if(10===this.chainId)s="0x94b008aA00579c1307B0EF2c499aD98a8ce58e58",n=6,console.log("使用Optimism网络USDT合约");else if(137===this.chainId)s="0xc2132D05D31c914a87C6611C10748AEb04B58e8F",n=6,console.log("使用Polygon网络USDT合约");else{if(42161!==this.chainId)return console.error("不支持的网络类型，chainId:",this.chainId),{success:!1,error:"当前网络 (chainId: "+this.chainId+") 不支持USDT",balance:0,debug:{chainId:this.chainId,supportedNetworks:[1,5,10,56,137,42161],currentNetwork:this.getCurrentNetworkType(),suggestion:"请切换到支持的网络：ETH主网(1)、BSC(56)、Optimism(10)、Polygon(137)、Arbitrum(42161)"}};s="0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",n=6,console.log("使用Arbitrum网络USDT合约")}}const i="0x70a08231",a=i+o.slice(2).padStart(64,"0");if(console.log("查询USDT余额参数:",{to:s,data:a,from:o,chainId:this.chainId,decimals:n,methodSignature:i}),!this.provider.request)throw console.error("Provider不支持request方法"),new Error("当前钱包不支持代币余额查询");try{const e=await this.provider.request({method:"eth_call",params:[{to:s,data:a},"latest"]});console.log("USDT余额查询原始结果:",e,"类型:",typeof e);let t=0;if(e&&"0x"!==e&&"0x0"!==e){const r=e.startsWith("0x")?e:"0x"+e,s=BigInt(r);t=Number(s)/Math.pow(10,n),console.log("USDT余额解析成功:",{rawResult:e,balanceHex:r,balanceWei:s.toString(),decimals:n,finalBalance:t})}else console.log("USDT余额为0或查询失败，原始结果:",e);return console.log("=== USDT余额查询完成 ==="),{success:!0,balance:t,address:o,symbol:"USDT",chainId:this.chainId,contractAddress:s,debug:{rawResult:e,decimals:n,networkType:this.getCurrentNetworkType()}}}catch(r){throw console.error("eth_call调用失败:",r),new Error("USDT余额查询调用失败: "+r.message)}}catch(s){return console.error("=== USDT余额查询异常 ==="),console.error("错误详情:",s),console.error("错误堆栈:",s.stack),{success:!1,error:s&&s.message?s.message:"获取USDT余额失败",balance:0,debug:{errorType:s.constructor.name,errorMessage:s.message,isConnected:this.isConnected,hasProvider:!!this.provider,chainId:this.chainId,account:this.account,networkType:this.getCurrentNetworkType()}}}}async signMessage(e){try{if(!this.isConnected||!this.provider)throw new Error("钱包未连接");if(this.provider.request){return{success:!0,signature:await this.provider.request({method:"personal_sign",params:[e,this.account]})}}throw new Error("当前钱包不支持消息签名")}catch(t){return console.error("签名消息失败:",t),{success:!1,error:t.message}}}async switchNetwork(e){try{if(!this.provider)throw new Error("钱包未连接");if(console.log("尝试切换网络到chainId:",e),this.provider.request){await this.provider.request({method:"wallet_switchEthereumChain",params:[{chainId:"0x"+e.toString(16)}]});return this.chainId=e,console.log("网络切换成功，新的chainId:",e),{success:!0,chainId:e}}throw new Error("当前钱包不支持网络切换")}catch(t){return console.error("切换网络失败:",t),4902===t.code?(console.log("网络未添加，尝试添加网络..."),await this.addNetwork(e)):{success:!1,error:t.message}}}async addNetwork(e){try{const t={1:{chainId:"0x1",chainName:"Ethereum Mainnet",nativeCurrency:{name:"Ether",symbol:"ETH",decimals:18},rpcUrls:["https://mainnet.infura.io/v3/"],blockExplorerUrls:["https://etherscan.io"]},56:{chainId:"0x38",chainName:"BSC Mainnet",nativeCurrency:{name:"BNB",symbol:"BNB",decimals:18},rpcUrls:["https://bsc-dataseed.binance.org/"],blockExplorerUrls:["https://bscscan.com"]},10:{chainId:"0xA",chainName:"Optimism",nativeCurrency:{name:"Ether",symbol:"ETH",decimals:18},rpcUrls:["https://mainnet.optimism.io"],blockExplorerUrls:["https://optimistic.etherscan.io"]},137:{chainId:"0x89",chainName:"Polygon Mainnet",nativeCurrency:{name:"MATIC",symbol:"MATIC",decimals:18},rpcUrls:["https://polygon-rpc.com/"],blockExplorerUrls:["https://polygonscan.com"]},42161:{chainId:"0xA4B1",chainName:"Arbitrum One",nativeCurrency:{name:"Ether",symbol:"ETH",decimals:18},rpcUrls:["https://arb1.arbitrum.io/rpc"],blockExplorerUrls:["https://arbiscan.io"]}}[e];if(!t)throw new Error("不支持的网络配置");await this.provider.request({method:"wallet_addEthereumChain",params:[t]});return this.chainId=e,console.log("网络添加成功，chainId:",e),{success:!0,chainId:e}}catch(t){return console.error("添加网络失败:",t),{success:!1,error:t.message}}}async addToken(e,t,r,s){try{if(!this.provider)throw new Error("钱包未连接");if(this.provider.request){return{success:!0,result:await this.provider.request({method:"wallet_watchAsset",params:{type:"ERC20",options:{address:e,symbol:t,decimals:r,image:s}}})}}throw new Error("当前钱包不支持添加代币")}catch(n){return console.error("添加代币失败:",n),{success:!1,error:n.message}}}async getTokenBalance(e,t){try{if(!this.isConnected||!this.provider)throw new Error("钱包未连接");const r=t||this.account,s="0x70a08231"+r.slice(2).padStart(64,"0");if(this.provider.request){const t=await this.provider.request({method:"eth_call",params:[{to:e,data:s},"latest"]});let n=0;if(t&&"0x"!==t){const e=t.startsWith("0x")?t:"0x"+t,r=BigInt(e);n=Number(r)/Math.pow(10,18)}return{success:!0,balance:n,address:r,tokenAddress:e}}throw new Error("当前钱包不支持代币余额查询")}catch(r){return console.error("获取代币余额失败:",r),{success:!1,error:r.message,balance:"0"}}}onAccountsChanged(e){this.provider&&this.provider.on&&this.provider.on("accountsChanged",e)}onChainChanged(e){this.provider&&this.provider.on&&this.provider.on("chainChanged",e)}onConnect(e){this.provider&&this.provider.on&&this.provider.on("connect",e)}onDisconnect(e){this.provider&&this.provider.on&&this.provider.on("disconnect",e)}};const a=new class{constructor(){this.currentService=null,this.serviceType=null,this.init()}init(){this.isEthereumEnvironment()?(this.currentService=i,this.serviceType="Ethereum",console.log("ʹ����̫��Ǯ������")):this.isH5Environment()?(this.currentService=i,this.serviceType="H5",console.log("ʹ��H5Ǯ������")):(this.currentService=e,this.serviceType="Native",console.log("ʹ��ԭ��Ǯ������"))}isEthereumEnvironment(){return"undefined"!=typeof window&&window.ethereum}isH5Environment(){return!0}getServiceType(){return this.serviceType}async detectTPWallet(){try{return await this.currentService.detectTPWallet()}catch(e){return console.error("���Ǯ��ʧ��:",e),!1}}async connectWallet(){try{const e=await this.currentService.connectWallet();return e.success||console.warn("Ǯ������ʧ��:",e),e}catch(e){console.error("����Ǯ��ʧ��:",e);let t="����Ǯ��ʱ����δ֪����",r="�����������Ӻ�Ǯ��Ӧ��״̬";return e.message.includes("�û��ܾ�")?(t="�û��ܾ�������Ǯ��",r='����Ǯ���е��"����"��"ȷ��"'):e.message.includes("δ��⵽")&&(t="δ��⵽Ǯ��",r="��ȷ���Ѱ�װǮ��Ӧ�ò�ˢ��ҳ��"),{success:!1,error:t,suggestions:r,code:"CONNECTION_ERROR"}}}async getBalance(e=null){try{const t=await this.currentService.getBalance(e);return t.success||"Native"!==this.serviceType?t:(console.warn("ԭ�������ȡ���ʧ�ܣ�����ģ��ģʽ"),await this.currentService.mockGetBalance())}catch(t){return console.error("��ȡ���ʧ��:",t),{success:!1,error:t.message}}}async sendTransaction(e,t){try{return await this.currentService.sendTransaction(e,t)}catch(r){return console.error("���ͽ���ʧ��:",r),{success:!1,error:r.message}}}async getNetworkInfo(){try{if(!this.currentService)return console.warn("Ǯ������δ��ʼ��"),{isConnected:!1,account:null,chainId:null};const e=this.currentService.getNetworkInfo();return console.log("Ǯ�������ȡ������Ϣ:",e),e}catch(e){return console.error("��ȡ������Ϣʧ��:",e),{isConnected:!1,account:null,chainId:null}}}async switchNetwork(e){try{return await this.currentService.switchNetwork(e)}catch(t){return console.error("�л�����ʧ��:",t),{success:!1,error:t.message}}}async addToken(e,t,r,s){try{return await this.currentService.addToken(e,t,r,s)}catch(n){return console.error("���Ӵ���ʧ��:",n),{success:!1,error:n.message}}}async getTokenBalance(e,t){try{return await this.currentService.getTokenBalance(e,t)}catch(r){return console.error("��ȡ�������ʧ��:",r),{success:!1,error:r.message,balance:"0"}}}async getUSDTBalance(e=null){try{return await this.currentService.getUSDTBalance(e)}catch(t){return console.error("��ȡUSDT���ʧ��:",t),{success:!1,error:t&&t.message?t.message:"��ȡUSDT���ʧ��",balance:0}}}async signMessage(e){try{return await this.currentService.signMessage(e)}catch(t){return console.error("ǩ����Ϣʧ��:",t),{success:!1,error:t.message}}}async disconnectWallet(){try{return await this.currentService.disconnectWallet()}catch(e){return console.error("�Ͽ�Ǯ������ʧ��:",e),{success:!1,error:e.message}}}onAccountsChanged(e){this.currentService&&"function"==typeof this.currentService.onAccountsChanged&&this.currentService.onAccountsChanged(e)}onChainChanged(e){this.currentService&&"function"==typeof this.currentService.onChainChanged&&this.currentService.onChainChanged(e)}onConnect(e){this.currentService&&"function"==typeof this.currentService.onConnect&&this.currentService.onConnect(e)}onDisconnect(e){this.currentService&&"function"==typeof this.currentService.onDisconnect&&this.currentService.onDisconnect(e)}formatBalance(e,t=18){const r=Math.pow(10,t);return(parseFloat(e)/r).toFixed(6)}formatAddress(e){return e?`${e.slice(0,6)}...`:""}validateAddress(e){if(!e||"string"!=typeof e)return!1;return/^0x[a-fA-F0-9]{40}$/.test(e)}getExplorerUrl(e,t="tx"){const r="https://etherscan.io";switch(t){case"tx":return`${r}/tx/`;case"address":return`${r}/address/`;case"token":return`${r}/token/`;default:return r}}handleError(e){let t="����ʧ�ܣ�������";return 4001===e.code?t="�û�ȡ���˲���":-32602===e.code?t="��������":-32603===e.code?t="�ڲ�����":e.message&&(e.message.includes("insufficient funds")?t="����":e.message.includes("gas")?t="Gas���ô���":e.message.includes("network")&&(t="�������Ӵ���")),{success:!1,error:t,originalError:e}}async sendUSDTTransaction(e,t){try{return await this.currentService.sendUSDTTransaction(e,t)}catch(r){return console.error("发送USDT转账失败:",r),{success:!1,error:r.message}}}};export{n as a,o as b,s as g,a as w};
